# Production AI Engine Dockerfile
# Build stage
FROM python:3.11-slim AS builder

# Security: Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Security: Create build user
RUN groupadd -g 1000 builder && \
    useradd -r -u 1000 -g builder builder

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip==24.0 && \
    pip install --no-cache-dir -r requirements.txt

# Runtime stage
FROM python:3.11-slim AS runner

# Security: Install security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Security: Create non-root user
RUN groupadd -g 1000 atlas && \
    useradd -r -u 1000 -g atlas atlas

# Create app directory
RUN mkdir -p /app && \
    chown atlas:atlas /app

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder --chown=atlas:atlas /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder --chown=atlas:atlas /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=atlas:atlas . .

# Security: Set file permissions
RUN chmod -R 755 /app && \
    find /app -type f -name "*.py" -exec chmod 644 {} \;

# Security: Switch to non-root user
USER atlas

# Expose port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production
ENV LOG_LEVEL=info

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health', timeout=5)" || exit 1

# Start the application
CMD ["python", "main.py"]
