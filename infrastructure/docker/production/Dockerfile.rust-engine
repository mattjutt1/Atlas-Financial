# Production Rust Financial Engine Dockerfile
# Build stage
FROM rust:1.75-alpine AS builder

# Security: Install build dependencies
RUN apk update && apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Security: Create build user
RUN addgroup -g 1000 -S builder && \
    adduser -S builder -u 1000

# Set working directory
WORKDIR /app

# Copy dependency files
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/

# Security: Change ownership to build user
RUN chown -R builder:builder /app
USER builder

# Build dependencies (cached layer)
RUN cargo fetch

# Build the application in release mode
RUN cargo build --release --bin financial-api

# Runtime stage
FROM alpine:3.19 AS runner

# Security: Install security updates and runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    ca-certificates \
    tzdata \
    openssl \
    && rm -rf /var/cache/apk/*

# Security: Create non-root user
RUN addgroup -g 1000 -S atlas && \
    adduser -S atlas -u 1000 -G atlas

# Create app directory
RUN mkdir -p /app && \
    chown atlas:atlas /app

WORKDIR /app

# Copy binary from builder stage
COPY --from=builder --chown=atlas:atlas /app/target/release/financial-api ./financial-api

# Security: Set executable permissions
RUN chmod +x ./financial-api

# Security: Switch to non-root user
USER atlas

# Expose port
EXPOSE 8080

# Set environment variables
ENV RUST_LOG=info
ENV ENVIRONMENT=production
ENV HOST=0.0.0.0
ENV PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider --timeout=5 http://localhost:8080/health || exit 1

# Start the application
CMD ["./financial-api"]