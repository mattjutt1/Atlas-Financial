version: '3.8'

# Production Docker Compose Configuration for Atlas Financial
# This configuration is optimized for production deployment with security hardening

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: atlas-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: atlas_financial
      POSTGRES_USER: atlas
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: firefly,hasura,grafana,supertokens
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data:Z
      - ../scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh:ro,Z
    networks:
      - atlas-network-prod
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlas -d atlas_financial"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: atlas-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory-policy allkeys-lru
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data_prod:/data:Z
    networks:
      - atlas-network-prod
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SuperTokens Authentication - Production Configuration
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.2
    container_name: atlas-supertokens-prod
    restart: unless-stopped
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://atlas:${POSTGRES_PASSWORD}@postgres:5432/supertokens"
      API_KEYS: ${SUPERTOKENS_API_KEY}
      SUPERTOKENS_HOST: "0.0.0.0"
      SUPERTOKENS_PORT: 3567
    ports:
      - "127.0.0.1:3567:3567"  # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network-prod
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3567/hello || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Hasura GraphQL Engine - Production Configuration
  hasura:
    image: hasura/graphql-engine:v2.42.0
    container_name: atlas-hasura-prod
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://atlas:${POSTGRES_PASSWORD}@postgres:5432/firefly
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://atlas:${POSTGRES_PASSWORD}@postgres:5432/hasura
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: |
        {
          "jwk_url": "http://supertokens:3567/auth/jwt/jwks.json",
          "issuer": "http://supertokens:3567",
          "audience": "atlas-financial"
        }
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_CORS_DOMAIN: "https://atlas-financial.com,https://www.atlas-financial.com"
      HASURA_GRAPHQL_DISABLE_CORS: "false"
      HASURA_GRAPHQL_WS_READ_COOKIE: "false"
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
    ports:
      - "127.0.0.1:8081:8080"  # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
    networks:
      - atlas-network-prod
    volumes:
      - ../../services/hasura/metadata:/hasura-metadata:ro,Z
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Firefly III - Production Configuration
  firefly:
    image: fireflyiii/core:latest
    container_name: atlas-firefly-prod
    restart: unless-stopped
    environment:
      APP_KEY: ${FIREFLY_APP_KEY}
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: firefly
      DB_USERNAME: atlas
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      APP_URL: https://firefly.atlas-financial.com
      TRUSTED_PROXIES: "**"
      LOG_CHANNEL: stdout
      APP_LOG_LEVEL: warning
      APP_ENV: production
      APP_DEBUG: "false"
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MAIL_MAILER: log
      SEND_REGISTRATION_MAIL: "false"
      SEND_ERROR_MESSAGE: "false"
    ports:
      - "127.0.0.1:8082:8080"  # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - atlas-network-prod
    volumes:
      - firefly_upload_prod:/var/www/html/storage/upload:Z
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana - Production Configuration
  grafana:
    image: grafana/grafana-oss:10.4.1
    container_name: atlas-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: atlas
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      GF_SERVER_ROOT_URL: https://grafana.atlas-financial.com
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_CONTENT_TYPE_PROTECTION: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: "nosniff"
      GF_SECURITY_X_XSS_PROTECTION: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
    ports:
      - "127.0.0.1:3001:3000"  # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network-prod
    volumes:
      - grafana_data_prod:/var/lib/grafana:Z
      - ../grafana/provisioning:/etc/grafana/provisioning:ro,Z
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # Grafana user
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus - Production Configuration
  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: atlas-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=warn'
      - '--web.external-url=https://prometheus.atlas-financial.com'
    ports:
      - "127.0.0.1:9090:9090"  # Bind to localhost only
    networks:
      - atlas-network-prod
    volumes:
      - prometheus_data_prod:/prometheus:Z
      - ../prometheus/config:/etc/prometheus:ro,Z
      - ../prometheus/rules:/etc/prometheus/rules:ro,Z
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.61.0
    container_name: atlas-redis-exporter-prod
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:9121:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - atlas-network-prod
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9121/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: atlas-postgres-exporter-prod
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://atlas:${POSTGRES_PASSWORD}@postgres:5432/atlas_financial?sslmode=disable
      PG_EXPORTER_WEB_LISTEN_ADDRESS: ":9187"
    ports:
      - "127.0.0.1:9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network-prod
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9187/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  atlas-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_prod:
    driver: local
  firefly_upload_prod:
    driver: local
  grafana_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
