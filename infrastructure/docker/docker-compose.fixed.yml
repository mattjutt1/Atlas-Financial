version: '3.8'

services:
  # PostgreSQL Database - Core data store
  postgres:
    image: postgres:15-alpine
    container_name: atlas-postgres
    environment:
      POSTGRES_DB: atlas_financial
      POSTGRES_USER: atlas
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-atlas_dev_password}
      POSTGRES_MULTIPLE_DATABASES: firefly,hasura,keycloak,grafana
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlas -d atlas_financial"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 15s

  # Keycloak - Identity and Access Management  
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: atlas-keycloak
    command: start-dev
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin_dev_password}
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: atlas
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-atlas_dev_password}
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - keycloak_data:/opt/keycloak/data
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\\r\\nhost: http://localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3;grep 'HTTP/1.1 200 OK' <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Firefly III - Personal Finance Manager
  firefly:
    image: fireflyiii/core:latest
    container_name: atlas-firefly
    environment:
      APP_KEY: ${FIREFLY_APP_KEY:-base64:your-32-character-app-key-here-change-this}
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: firefly
      DB_USERNAME: atlas
      DB_PASSWORD: ${POSTGRES_PASSWORD:-atlas_dev_password}
      APP_URL: http://localhost:8082
      TRUSTED_PROXIES: '**'
      LOG_CHANNEL: stdout
      APP_LOG_LEVEL: info
      AUTHENTICATION_GUARD: web
      AUTHENTICATION_GUARD_HEADER: REMOTE_USER
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - firefly_upload:/var/www/html/storage/upload
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/about || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hasura GraphQL Engine - API Gateway
  hasura:
    image: hasura/graphql-engine:v2.42.0
    container_name: atlas-hasura
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://atlas:${POSTGRES_PASSWORD:-atlas_dev_password}@postgres:5432/firefly
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://atlas:${POSTGRES_PASSWORD:-atlas_dev_password}@postgres:5432/hasura
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-atlas_hasura_admin_secret}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"RS256","jwks_url":"http://keycloak:8080/realms/atlas/protocol/openid_connect/certs"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Engine - Finance Brain (will be built from source)
  ai-engine:
    build:
      context: ../../services/ai-engine
      dockerfile: Dockerfile
    container_name: atlas-ai-engine
    environment:
      HASURA_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-atlas_hasura_admin_secret}
      POSTGRES_URL: postgres://atlas:${POSTGRES_PASSWORD:-atlas_dev_password}@postgres:5432/firefly
      AI_MODEL_PATH: /app/models
      LOG_LEVEL: info
    ports:
      - "8083:8000"
    depends_on:
      hasura:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - ai_models:/app/models
      - ai_cache:/app/cache
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Grafana - Observability and Financial Dashboards
  grafana:
    image: grafana/grafana-oss:10.4.1
    container_name: atlas-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin_dev_password}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: atlas
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-atlas_dev_password}
      GF_AUTH_GENERIC_OAUTH_ENABLED: true
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: grafana
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${GRAFANA_OAUTH_SECRET:-grafana_client_secret}
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: http://localhost:8080/realms/atlas/protocol/openid_connect/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: http://keycloak:8080/realms/atlas/protocol/openid_connect/token
      GF_AUTH_GENERIC_OAUTH_API_URL: http://keycloak:8080/realms/atlas/protocol/openid_connect/userinfo
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: atlas-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-atlas_redis_password}
    ports:
      - "6379:6379"
    networks:
      - atlas-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-atlas_redis_password} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  atlas-network:
    driver: bridge
    name: atlas-network

volumes:
  postgres_data:
    name: atlas-postgres-data
  keycloak_data:
    name: atlas-keycloak-data
  firefly_upload:
    name: atlas-firefly-upload
  ai_models:
    name: atlas-ai-models
  ai_cache:
    name: atlas-ai-cache
  grafana_data:
    name: atlas-grafana-data
  redis_data:
    name: atlas-redis-data