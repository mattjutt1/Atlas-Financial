version: '3.8'

# Docker Compose Secrets - Industry Best Practice Security
secrets:
  postgres_password:
    file: ./config/secrets/postgres_password.txt
  postgres_connection_uri:
    file: ./config/secrets/postgres_connection_uri.txt
  supertokens_api_key:
    file: ./config/secrets/supertokens_api_key.txt
  hasura_admin_secret:
    file: ./config/secrets/hasura_admin_secret.txt
  hasura_database_url:
    file: ./config/secrets/hasura_database_url.txt
  hasura_metadata_url:
    file: ./config/secrets/hasura_metadata_url.txt
  firefly_app_key:
    file: ./config/secrets/firefly_app_key.txt
  jwt_secret_key:
    file: ./config/secrets/jwt_secret_key.txt
  redis_password:
    file: ./config/secrets/redis_password.txt
  rust_database_url:
    file: ./config/secrets/rust_database_url.txt

services:
  # PostgreSQL Database - Core data store
  postgres:
    image: postgres:15-alpine
    container_name: atlas-postgres
    environment:
      POSTGRES_DB: atlas_financial
      POSTGRES_USER: atlas
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_MULTIPLE_DATABASES: firefly,hasura,grafana,supertokens
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlas -d atlas_financial"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SuperTokens Core Service - Authentication Backend
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.2
    container_name: atlas-supertokens
    environment:
      POSTGRESQL_CONNECTION_URI_FILE: /run/secrets/postgres_connection_uri
      API_KEYS_FILE: /run/secrets/supertokens_api_key
      SUPERTOKENS_HOST: "0.0.0.0"
      SUPERTOKENS_PORT: 3567
    secrets:
      - postgres_connection_uri
      - supertokens_api_key
    ports:
      - "3567:3567"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3567/hello || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Firefly III - Personal Finance Manager
  firefly:
    image: fireflyiii/core:latest
    container_name: atlas-firefly
    environment:
      APP_KEY_FILE: /run/secrets/firefly_app_key
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: firefly
      DB_USERNAME: atlas
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      APP_URL: http://localhost:8082
      TRUSTED_PROXIES: '**'
      LOG_CHANNEL: stdout
      APP_LOG_LEVEL: info
      AUTHENTICATION_GUARD: web
      AUTHENTICATION_GUARD_HEADER: REMOTE_USER
    secrets:
      - postgres_password
      - firefly_app_key
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - firefly_upload:/var/www/html/storage/upload
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hasura GraphQL Engine - API Gateway (SECURED)
  hasura:
    image: hasura/graphql-engine:v2.42.0
    container_name: atlas-hasura
    environment:
      HASURA_GRAPHQL_DATABASE_URL_FILE: /run/secrets/hasura_database_url
      HASURA_GRAPHQL_METADATA_DATABASE_URL_FILE: /run/secrets/hasura_metadata_url
      HASURA_GRAPHQL_ADMIN_SECRET_FILE: /run/secrets/hasura_admin_secret
      # SECURITY: Disable dev mode and console for production
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # JWT Configuration for SuperTokens integration (CORRECTED)
      HASURA_GRAPHQL_JWT_SECRET: |
        {
          "jwk_url": "http://supertokens:3567/auth/jwt/jwks.json",
          "issuer": "http://supertokens:3567",
          "audience": "atlas-financial"
        }
      # SECURITY: Remove anonymous role - require authentication
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: "true"
      HASURA_GRAPHQL_QUERY_COMPLEXITY_LIMIT: 1000
      HASURA_GRAPHQL_MAX_ROWS: 10000
      HASURA_GRAPHQL_ENABLE_INTROSPECTION: "false"
    secrets:
      - hasura_database_url
      - hasura_metadata_url
      - hasura_admin_secret
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Session Cache and Performance Optimization
  redis:
    image: redis:7-alpine
    container_name: atlas-redis
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    ports:
      - "6379:6379"
    networks:
      - atlas-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Web Application
  web:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile.dev
    container_name: atlas-web
    environment:
      NEXT_PUBLIC_SUPERTOKENS_API_DOMAIN: http://localhost:3567
      NEXT_PUBLIC_SUPERTOKENS_WEBSITE_DOMAIN: http://localhost:3000
      NEXT_PUBLIC_HASURA_GRAPHQL_URL: http://localhost:8081/v1/graphql
      # Use secrets for sensitive configuration
      SUPERTOKENS_API_KEY_FILE: /run/secrets/supertokens_api_key
      JWT_SECRET_FILE: /run/secrets/jwt_secret_key
    secrets:
      - supertokens_api_key
      - jwt_secret_key
    ports:
      - "3000:3000"
    depends_on:
      hasura:
        condition: service_healthy
      supertokens:
        condition: service_healthy
    networks:
      - atlas-network
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust Financial Engine - Bank-Grade Calculations
  rust-financial-engine:
    build:
      context: ../../services/rust-financial-engine
      dockerfile: Dockerfile
    container_name: atlas-rust-engine
    environment:
      HOST: "0.0.0.0"
      PORT: 8080
      DATABASE_URL_FILE: /run/secrets/rust_database_url
      JWT_SECRET_FILE: /run/secrets/jwt_secret_key
      RUST_LOG: info
    secrets:
      - rust_database_url
      - jwt_secret_key
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Secure Network Configuration
networks:
  atlas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent Storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  firefly_upload:
    driver: local
