apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
  namespace: atlas-ai-production
  labels:
    app: timescaledb
    version: pg15-latest
    tier: data-storage
    purpose: feature-store
spec:
  serviceName: timescaledb
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
        tier: data-storage
        purpose: feature-store
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
      containers:
      - name: timescaledb
        image: timescale/timescaledb-ha:pg15-latest
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-secrets
              key: password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: timescaledb-secrets
              key: username
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: timescaledb-secrets
              key: database
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: TS_TUNE_MEMORY
          value: "6GB"
        - name: TS_TUNE_NUM_CPUS
          value: "4"
        resources:
          requests:
            memory: "6Gi"
            cpu: "2000m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "5Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 70
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: timescaledb-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: postgresql-config
          mountPath: /etc/postgresql
          readOnly: true
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: timescaledb-secrets
              key: connection-string
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
      volumes:
      - name: init-scripts
        configMap:
          name: timescaledb-init
          defaultMode: 0755
      - name: postgresql-config
        configMap:
          name: postgresql-config
          defaultMode: 0644
  volumeClaimTemplates:
  - metadata:
      name: timescaledb-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 200Gi
---
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
  namespace: atlas-ai-production
  labels:
    app: timescaledb
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  selector:
    app: timescaledb
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  - name: metrics
    port: 9187
    targetPort: 9187
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescaledb-init
  namespace: atlas-ai-production
  labels:
    app: timescaledb
data:
  01-create-extensions.sql: |
    -- Create TimescaleDB extension
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
    
    -- Create PostGIS extension for geospatial features
    CREATE EXTENSION IF NOT EXISTS postgis CASCADE;
    
    -- Create vector extension for ML embeddings
    CREATE EXTENSION IF NOT EXISTS vector CASCADE;
    
    -- Create additional useful extensions
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements CASCADE;
    CREATE EXTENSION IF NOT EXISTS pg_trgm CASCADE;
    CREATE EXTENSION IF NOT EXISTS btree_gin CASCADE;
  
  02-create-feature-tables.sql: |
    -- Financial feature store tables
    CREATE TABLE IF NOT EXISTS user_financial_features (
        user_id UUID NOT NULL,
        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        monthly_income DECIMAL(19,4),
        monthly_expenses DECIMAL(19,4),
        debt_to_income_ratio DECIMAL(8,4),
        credit_utilization DECIMAL(8,4),
        emergency_fund_months DECIMAL(8,4),
        investment_percentage DECIMAL(8,4),
        financial_health_score DECIMAL(8,4),
        risk_tolerance_score DECIMAL(8,4),
        PRIMARY KEY (user_id, timestamp)
    );
    
    -- Convert to hypertable for time-series optimization
    SELECT create_hypertable('user_financial_features', 'timestamp', 
                           chunk_time_interval => INTERVAL '1 month');
    
    -- Transaction categorization features
    CREATE TABLE IF NOT EXISTS transaction_features (
        transaction_id UUID PRIMARY KEY,
        user_id UUID NOT NULL,
        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        amount DECIMAL(19,4) NOT NULL,
        category VARCHAR(100),
        subcategory VARCHAR(100),
        merchant_name VARCHAR(255),
        description TEXT,
        is_recurring BOOLEAN DEFAULT FALSE,
        confidence_score DECIMAL(8,4),
        feature_vector VECTOR(512), -- AI embedding vector
        created_at TIMESTAMPTZ DEFAULT NOW()
    );
    
    -- AI model prediction cache
    CREATE TABLE IF NOT EXISTS ai_predictions (
        prediction_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL,
        model_name VARCHAR(100) NOT NULL,
        model_version VARCHAR(50) NOT NULL,
        input_features JSONB NOT NULL,
        prediction_result JSONB NOT NULL,
        confidence_score DECIMAL(8,4),
        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        expires_at TIMESTAMPTZ
    );
    
    -- Convert to hypertable
    SELECT create_hypertable('ai_predictions', 'timestamp',
                           chunk_time_interval => INTERVAL '1 week');
    
    -- Indexes for performance
    CREATE INDEX IF NOT EXISTS idx_user_financial_features_user_id 
        ON user_financial_features (user_id);
    CREATE INDEX IF NOT EXISTS idx_transaction_features_user_id 
        ON transaction_features (user_id);
    CREATE INDEX IF NOT EXISTS idx_transaction_features_category 
        ON transaction_features (category);
    CREATE INDEX IF NOT EXISTS idx_ai_predictions_user_model 
        ON ai_predictions (user_id, model_name);
    
    -- Vector similarity index for ML embeddings
    CREATE INDEX IF NOT EXISTS idx_transaction_features_vector 
        ON transaction_features USING ivfflat (feature_vector vector_cosine_ops);
    
  03-create-roles.sql: |
    -- Create AI feature store user
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'ai_features_user') THEN
            CREATE ROLE ai_features_user WITH LOGIN PASSWORD '${TIMESCALEDB_PASSWORD}';
        END IF;
    END
    $$;
    
    -- Grant permissions
    GRANT CONNECT ON DATABASE features TO ai_features_user;
    GRANT USAGE ON SCHEMA public TO ai_features_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ai_features_user;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ai_features_user;
    
    -- Grant permissions on future tables
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ai_features_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO ai_features_user;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: atlas-ai-production
  labels:
    app: timescaledb
data:
  postgresql.conf: |
    # PostgreSQL Configuration for AI Feature Store
    
    # Connection Settings
    max_connections = 200
    shared_buffers = 2GB
    effective_cache_size = 6GB
    maintenance_work_mem = 512MB
    checkpoint_completion_target = 0.9
    
    # WAL Configuration
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # TimescaleDB Settings
    shared_preload_libraries = 'timescaledb,pg_stat_statements,vector'
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%a.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 1GB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'ddl'
    log_min_duration_statement = 1000
    
    # Vector Extension Settings
    vector.vector_size_limit = 2048