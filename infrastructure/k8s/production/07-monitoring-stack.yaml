apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: atlas-monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        ports:
        - containerPort: 9090
          name: http
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus/"
        - "--web.console.libraries=/etc/prometheus/console_libraries"
        - "--web.console.templates=/etc/prometheus/consoles"
        - "--storage.tsdb.retention.time=30d"
        - "--storage.tsdb.retention.size=50GB"
        - "--web.enable-lifecycle"
        - "--web.enable-admin-api"
        - "--log.level=info"
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
          readOnly: true
        - name: rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: storage
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: rules
        configMap:
          name: prometheus-rules
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: atlas-monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
  - name: http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: atlas-monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: grafana-admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.atlas-financial.com"
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 472
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
          readOnly: true
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: atlas-monitoring
  labels:
    app: grafana
spec:
  type: LoadBalancer
  selector:
    app: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: atlas-monitoring
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'atlas-ai-production'
        environment: 'production'
    
    rule_files:
    - '/etc/prometheus/rules/*.yml'
    
    scrape_configs:
    # AI Services
    - job_name: 'ai-engine'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-ai-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: ai-engine-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      - source_labels: [__meta_kubernetes_pod_node_name]
        target_label: node
      metrics_path: /metrics
      scrape_interval: 30s
    
    - job_name: 'market-data-service'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-ai-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: market-data-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: /metrics
      scrape_interval: 15s
    
    - job_name: 'ab-testing-service'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-ai-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: ab-testing-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: /metrics
      scrape_interval: 30s
    
    # Data Layer
    - job_name: 'redis-cluster'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-ai-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: redis-cluster
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: /metrics
      scrape_interval: 30s
    
    - job_name: 'timescaledb'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-ai-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: timescaledb
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      metrics_path: /metrics
      scrape_interval: 60s
    
    # Jaeger Tracing
    - job_name: 'jaeger'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - atlas-monitoring
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: jaeger
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http-query
      metrics_path: /metrics
      scrape_interval: 30s
    
    # Kubernetes Components
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
    # Alerting
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager.atlas-monitoring:9093
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: atlas-monitoring
  labels:
    app: prometheus
data:
  ai-services.yml: |
    groups:
    - name: ai-services
      rules:
      - alert: AIEngineDown
        expr: up{job="ai-engine"} == 0
        for: 1m
        labels:
          severity: critical
          service: ai-engine
        annotations:
          summary: "AI Engine is down"
          description: "AI Engine has been down for more than 1 minute"
      
      - alert: AIEngineHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="ai-engine"}[5m])) > 2
        for: 5m
        labels:
          severity: warning
          service: ai-engine
        annotations:
          summary: "AI Engine high latency"
          description: "AI Engine 95th percentile latency is above 2 seconds"
      
      - alert: AIEngineHighMemoryUsage
        expr: (container_memory_usage_bytes{pod=~"ai-engine-.*"} / container_spec_memory_limit_bytes{pod=~"ai-engine-.*"}) > 0.8
        for: 5m
        labels:
          severity: warning
          service: ai-engine
        annotations:
          summary: "AI Engine high memory usage"
          description: "AI Engine memory usage is above 80%"
      
      - alert: MarketDataServiceDown
        expr: up{job="market-data-service"} == 0
        for: 1m
        labels:
          severity: critical
          service: market-data-service
        annotations:
          summary: "Market Data Service is down"
          description: "Market Data Service has been down for more than 1 minute"
      
      - alert: RedisClusterDown
        expr: up{job="redis-cluster"} == 0
        for: 1m
        labels:
          severity: critical
          service: redis-cluster
        annotations:
          summary: "Redis Cluster is down"
          description: "Redis Cluster has been down for more than 1 minute"
      
      - alert: TimescaleDBDown
        expr: up{job="timescaledb"} == 0
        for: 2m
        labels:
          severity: critical
          service: timescaledb
        annotations:
          summary: "TimescaleDB is down"
          description: "TimescaleDB has been down for more than 2 minutes"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: atlas-monitoring
  labels:
    app: grafana
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.atlas-monitoring:9090
      isDefault: true
      editable: true
  
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'ai-services'
      orgId: 1
      folder: 'AI Services'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: atlas-monitoring
  labels:
    app: jaeger
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      containers:
      - name: jaeger-all-in-one
        image: jaegertracing/all-in-one:1.51.0
        ports:
        - containerPort: 16686
          name: http-query
        - containerPort: 14268
          name: http-collector
        - containerPort: 14250
          name: grpc-collector
        - containerPort: 6831
          name: udp-thrift
        - containerPort: 6832
          name: udp-binary
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: MEMORY_MAX_TRACES
          value: "10000"
        - name: QUERY_MAX_CLOCK_SKEW_ADJUSTMENT
          value: "0s"
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: atlas-monitoring
  labels:
    app: jaeger
spec:
  type: ClusterIP
  selector:
    app: jaeger
  ports:
  - name: http-query
    port: 16686
    targetPort: 16686
  - name: http-collector
    port: 14268
    targetPort: 14268
  - name: grpc-collector
    port: 14250
    targetPort: 14250
  - name: udp-thrift
    port: 6831
    targetPort: 6831
    protocol: UDP
  - name: udp-binary
    port: 6832
    targetPort: 6832
    protocol: UDP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: atlas-monitoring
  labels:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: atlas-monitoring