apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-services-network-policy
  namespace: atlas-ai-production
  labels:
    security-tier: high
    policy-type: network-segmentation
spec:
  podSelector:
    matchLabels:
      tier: ai-services
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8083
    - protocol: TCP
      port: 4000
    - protocol: TCP
      port: 8085
  # Allow inter-service communication within AI namespace
  - from:
    - podSelector:
        matchLabels:
          tier: ai-services
    ports:
    - protocol: TCP
      port: 8083
    - protocol: TCP
      port: 4000
    - protocol: TCP
      port: 8085
  # Allow monitoring scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: atlas-monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9091
    - protocol: TCP
      port: 9092
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow access to data services
  - to:
    - podSelector:
        matchLabels:
          tier: data-storage
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5432  # TimescaleDB
  # Allow access to core Atlas services
  - to:
    - namespaceSelector:
        matchLabels:
          name: atlas-financial
    ports:
    - protocol: TCP
      port: 8081  # Hasura
    - protocol: TCP
      port: 8082  # Rust Financial Engine
  # Allow HTTPS egress for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: data-storage-network-policy
  namespace: atlas-ai-production
  labels:
    security-tier: high
    policy-type: data-protection
spec:
  podSelector:
    matchLabels:
      tier: data-storage
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow AI services to access data stores
  - from:
    - podSelector:
        matchLabels:
          tier: ai-services
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5432  # TimescaleDB
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: atlas-monitoring
    ports:
    - protocol: TCP
      port: 9121  # Redis Exporter
    - protocol: TCP
      port: 9187  # Postgres Exporter
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow backup to S3
  - to: []
    ports:
    - protocol: TCP
      port: 443
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: atlas-ai-production
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ai-engine-authz
  namespace: atlas-ai-production
spec:
  selector:
    matchLabels:
      app: ai-engine
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/ingress-nginx/sa/nginx-ingress-serviceaccount"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/health", "/insights/*", "/models/*"]
  - from:
    - source:
        principals: ["cluster.local/ns/atlas-monitoring/sa/prometheus-sa"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-model-encryption-key
  namespace: atlas-ai-production
  labels:
    security-tier: critical
    encryption: aes-256
type: Opaque
stringData:
  key: "${AI_MODEL_ENCRYPTION_KEY}"
  algorithm: "AES-256-GCM"
  key-rotation-schedule: "monthly"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: atlas-ai-production
  labels:
    security-tier: high
data:
  security-policy.yaml: |
    # AI Security Configuration
    encryption:
      at_rest:
        enabled: true
        algorithm: "AES-256-GCM"
        key_rotation: "monthly"
      in_transit:
        enabled: true
        tls_version: "1.3"
        cipher_suites:
          - "TLS_AES_256_GCM_SHA384"
          - "TLS_CHACHA20_POLY1305_SHA256"
    
    authentication:
      jwt:
        algorithm: "RS256"
        expiry: "1h"
        refresh_expiry: "24h"
      rate_limiting:
        requests_per_minute: 100
        burst: 200
    
    data_protection:
      pii_detection: true
      data_masking: true
      audit_logging: true
      retention_policy: "30d"
    
    model_security:
      input_validation: true
      output_sanitization: true
      inference_rate_limit: 50
      model_versioning: true
      model_integrity_check: true
  
  audit-policy.yaml: |
    apiVersion: audit.k8s.io/v1
    kind: Policy
    rules:
    # Log all requests to AI services
    - level: Request
      namespaces: ["atlas-ai-production"]
      resources:
      - group: ""
        resources: ["pods", "services", "secrets"]
      - group: "apps"
        resources: ["deployments", "statefulsets"]
    
    # Log all secret access
    - level: RequestResponse
      resources:
      - group: ""
        resources: ["secrets"]
      namespaces: ["atlas-ai-production"]
    
    # Log all network policy changes
    - level: RequestResponse
      resources:
      - group: "networking.k8s.io"
        resources: ["networkpolicies"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-scanner-sa
  namespace: atlas-security
  labels:
    security-tier: high
    purpose: vulnerability-scanning
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-scanner-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies", "ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["security.istio.io"]
  resources: ["peerauthentications", "authorizationpolicies"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-scanner-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: security-scanner-role
subjects:
- kind: ServiceAccount
  name: security-scanner-sa
  namespace: atlas-security
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: security-scan-job
  namespace: atlas-security
  labels:
    security-tier: high
    purpose: vulnerability-scanning
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            security-tier: high
        spec:
          serviceAccountName: security-scanner-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
          containers:
          - name: security-scanner
            image: aquasec/trivy:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting security scan for Atlas AI services..."
              
              # Scan AI Engine image
              trivy image --format json --output /tmp/ai-engine-scan.json atlas-financial/ai-engine:v2.0.0
              
              # Scan Market Data Service image
              trivy image --format json --output /tmp/market-data-scan.json atlas-financial/market-data-service:v2.0.0
              
              # Scan AB Testing Service image
              trivy image --format json --output /tmp/ab-testing-scan.json atlas-financial/ab-testing-service:v2.0.0
              
              # Scan for Kubernetes misconfigurations
              trivy k8s --format json --output /tmp/k8s-scan.json atlas-ai-production
              
              # Upload results to security monitoring
              curl -X POST -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${SECURITY_API_TOKEN}" \
                -d @/tmp/ai-engine-scan.json \
                https://security.atlas-financial.com/api/v1/scans/ai-engine
              
              curl -X POST -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${SECURITY_API_TOKEN}" \
                -d @/tmp/market-data-scan.json \
                https://security.atlas-financial.com/api/v1/scans/market-data
              
              curl -X POST -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${SECURITY_API_TOKEN}" \
                -d @/tmp/ab-testing-scan.json \
                https://security.atlas-financial.com/api/v1/scans/ab-testing
              
              curl -X POST -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${SECURITY_API_TOKEN}" \
                -d @/tmp/k8s-scan.json \
                https://security.atlas-financial.com/api/v1/scans/kubernetes
              
              echo "Security scan completed successfully"
            env:
            - name: SECURITY_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: security-secrets
                  key: api-token
            resources:
              requests:
                memory: "1Gi"
                cpu: "500m"
              limits:
                memory: "2Gi"
                cpu: "1000m"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65534
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: tmp
              mountPath: /tmp
          volumes:
          - name: tmp
            emptyDir:
              sizeLimit: 1Gi
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: atlas-security
  labels:
    security-tier: high
    purpose: runtime-security
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/atlas_ai_rules.yaml
    
    json_output: true
    log_stderr: true
    log_syslog: false
    
    priority: debug
    
    http_output:
      enabled: true
      url: "https://security.atlas-financial.com/api/v1/alerts"
      headers:
        Authorization: "Bearer ${SECURITY_API_TOKEN}"
        Content-Type: "application/json"
  
  atlas_ai_rules.yaml: |
    # Atlas AI Security Rules
    - rule: Unauthorized AI Model Access
      desc: Detect unauthorized access to AI models
      condition: >
        open_read and
        fd.name pmatch (/app/models/*) and
        not proc.name in (ai-engine, model-loader)
      output: >
        Unauthorized AI model access detected
        (user=%user.name command=%proc.cmdline file=%fd.name)
      priority: WARNING
      tags: [ai-security, model-protection]
    
    - rule: Suspicious Network Connection from AI Service
      desc: Detect unexpected network connections from AI services
      condition: >
        spawned_process and
        proc.name in (ai-engine, market-data-service, ab-testing-service) and
        fd.type=ipv4 and
        not fd.net in (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) and
        not fd.snet in (atlas-financial.com, openai.com)
      output: >
        Suspicious network connection from AI service
        (service=%proc.name dest=%fd.rip:%fd.rport)
      priority: WARNING
      tags: [ai-security, network-monitoring]
    
    - rule: High Memory Usage in AI Service
      desc: Detect abnormally high memory usage in AI services
      condition: >
        spawned_process and
        proc.name in (ai-engine) and
        proc.vmrss > 6442450944  # 6GB in bytes
      output: >
        High memory usage detected in AI service
        (service=%proc.name memory=%proc.vmrss)
      priority: INFO
      tags: [ai-monitoring, resource-usage]
    
    - rule: AI Model File Modification
      desc: Detect unauthorized modifications to AI model files
      condition: >
        open_write and
        fd.name pmatch (/app/models/*) and
        not proc.name in (ai-engine, model-updater)
      output: >
        AI model file modification detected
        (user=%user.name command=%proc.cmdline file=%fd.name)
      priority: CRITICAL
      tags: [ai-security, model-integrity]