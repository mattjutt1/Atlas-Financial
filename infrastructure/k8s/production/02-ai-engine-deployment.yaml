apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-engine
  namespace: atlas-ai-production
  labels:
    app: ai-engine
    version: v2.0.0
    tier: ai-services
    wave: "2"
  annotations:
    deployment.kubernetes.io/revision: "1"
    atlas.financial/security-scan: "required"
    atlas.financial/compliance: "pci-dss"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-engine
  template:
    metadata:
      labels:
        app: ai-engine
        version: v2.0.0
        tier: ai-services
        wave: "2"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/metrics"
        atlas.financial/security-scan: "required"
    spec:
      serviceAccountName: ai-engine-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ai-engine
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - ai-compute
      tolerations:
      - key: "ai-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
      - name: ai-engine
        image: atlas-financial/ai-engine:v2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8083
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8084
          name: health
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: PORT
          value: "8083"
        - name: METRICS_PORT
          value: "9090"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: redis-url
        - name: HASURA_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: hasura-endpoint
        - name: HASURA_ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: hasura-admin-secret
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: postgres-url
        - name: RUST_ENGINE_URL
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: rust-engine-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: openai-api-key
        - name: AI_MODEL_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: ai-engine-secrets
              key: encryption-key
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8083
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: model-cache
          mountPath: /app/models
          readOnly: false
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: config
        configMap:
          name: ai-engine-config
          defaultMode: 0644
      - name: model-cache
        persistentVolumeClaim:
          claimName: ai-model-cache-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: var-cache
        emptyDir:
          sizeLimit: 2Gi
      imagePullSecrets:
      - name: atlas-registry-secret
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: ai-engine-service
  namespace: atlas-ai-production
  labels:
    app: ai-engine
    version: v2.0.0
    tier: ai-services
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  selector:
    app: ai-engine
  ports:
  - name: http
    port: 8083
    targetPort: 8083
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-engine-sa
  namespace: atlas-ai-production
  labels:
    app: ai-engine
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-engine-role
  namespace: atlas-ai-production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-engine-rolebinding
  namespace: atlas-ai-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ai-engine-role
subjects:
- kind: ServiceAccount
  name: ai-engine-sa
  namespace: atlas-ai-production