---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: atlas-financial-ingress
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-ancestors 'none';" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # SSL configuration
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256"
    
    # Performance optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Enable gzip compression
    nginx.ingress.kubernetes.io/enable-compression: "true"
    nginx.ingress.kubernetes.io/compression-types: "text/plain,text/css,application/json,application/javascript,text/xml,application/xml,application/xml+rss,text/javascript"
    
    # CORS configuration for API endpoints
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS, PUT, DELETE"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-max-age: "1728000"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
  - hosts:
    - atlas-financial.com
    - www.atlas-financial.com
    - api.atlas-financial.com
    - auth.atlas-financial.com
    - firefly.atlas-financial.com
    - grafana.atlas-financial.com
    - prometheus.atlas-financial.com
    secretName: atlas-financial-tls
  
  rules:
  # Main application domain
  - host: atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-frontend
            port:
              number: 3000
  
  # WWW redirect to main domain
  - host: www.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-frontend
            port:
              number: 3000
  
  # API Gateway (Hasura GraphQL)
  - host: api.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-hasura
            port:
              number: 8080
  
  # Authentication service (SuperTokens)
  - host: auth.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-supertokens
            port:
              number: 3567
  
  # Financial management (Firefly III)
  - host: firefly.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-firefly
            port:
              number: 8080
  
  # Observability dashboard (Grafana)
  - host: grafana.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-grafana
            port:
              number: 3000
  
  # Metrics (Prometheus) - Restricted access
  - host: prometheus.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-prometheus
            port:
              number: 9090
---
# Additional Ingress for development/staging services
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: atlas-financial-dev-ingress
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: ingress-dev
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Basic auth for development services
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: atlas-financial-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Atlas Financial Development Services"
    
    # Rate limiting for development endpoints
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
  - hosts:
    - rust-api.atlas-financial.com
    - ai-engine.atlas-financial.com
    secretName: atlas-financial-dev-tls
  
  rules:
  # Rust Financial Engine API (development placeholder)
  - host: rust-api.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-rust-financial-engine
            port:
              number: 8080
  
  # AI Engine API (development placeholder)
  - host: ai-engine.atlas-financial.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-ai-engine
            port:
              number: 8000
---
# Basic Auth Secret for development services
apiVersion: v1
kind: Secret
metadata:
  name: atlas-financial-basic-auth
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: auth
type: Opaque
data:
  # Username: admin, Password: REPLACE_WITH_SECURE_PASSWORD
  # Generate with: htpasswd -c auth admin
  auth: YWRtaW46JGFwcjEkSDY0RjBOTEgkLkp5Lk9kQUh1V3VFNi9Bb1FLN25TLw==
---
# Network Policy for Ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: atlas-financial-ingress-policy
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: network-policy
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  - from: []
    ports:
    - protocol: TCP
      port: 3000  # Frontend
    - protocol: TCP
      port: 3567  # SuperTokens
    - protocol: TCP
      port: 8080  # Hasura, Firefly, Rust Engine
    - protocol: TCP
      port: 8000  # AI Engine
    - protocol: TCP
      port: 9090  # Prometheus