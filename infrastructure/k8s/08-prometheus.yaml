---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp2  # Use appropriate storage class for your cluster
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'atlas-financial-production'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Prometheus self-monitoring
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 30s
        metrics_path: /metrics

      # PostgreSQL metrics
      - job_name: 'postgres-exporter'
        static_configs:
          - targets: ['postgres-exporter.atlas-financial.svc.cluster.local:9187']
        scrape_interval: 30s
        metrics_path: /metrics

      # Redis metrics
      - job_name: 'redis-exporter'
        static_configs:
          - targets: ['redis-exporter.atlas-financial.svc.cluster.local:9121']
        scrape_interval: 30s
        metrics_path: /metrics

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Atlas Financial services
      - job_name: 'atlas-services'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names:
                - atlas-financial
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # Add Alertmanager targets if deployed
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
data:
  atlas-financial.yml: |
    groups:
      - name: atlas-financial.rules
        rules:
          # High-level service availability
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service {{ $labels.job }} is down"
              description: "Service {{ $labels.job }} has been down for more than 1 minute."

          # Database alerts
          - alert: PostgreSQLDown
            expr: pg_up == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL is down"
              description: "PostgreSQL database is not responding."

          - alert: PostgreSQLTooManyConnections
            expr: sum(pg_stat_activity_count) by (instance) > 80
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL too many connections"
              description: "PostgreSQL instance {{ $labels.instance }} has {{ $value }} connections, which is more than 80."

          # Redis alerts
          - alert: RedisDown
            expr: redis_up == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: "Redis is down"
              description: "Redis instance is not responding."

          - alert: RedisHighMemoryUsage
            expr: (redis_memory_used_bytes / redis_memory_max_bytes) * 100 > 90
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "Redis high memory usage"
              description: "Redis instance is using {{ $value }}% of available memory."

          # Application performance alerts
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} errors per second for {{ $labels.job }}."

          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1.0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }}s for {{ $labels.job }}."

          # Resource usage alerts
          - alert: HighCPUUsage
            expr: rate(container_cpu_usage_seconds_total[5m]) * 100 > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage"
              description: "Container {{ $labels.container }} is using {{ $value }}% CPU."

          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage"
              description: "Container {{ $labels.container }} is using {{ $value }}% of available memory."

          # Disk space alerts
          - alert: DiskSpaceLow
            expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes) * 100 < 10
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Disk space low"
              description: "Disk space is {{ $value }}% on {{ $labels.instance }}."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-prometheus
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: atlas-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: atlas-financial
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/instance: atlas-prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: atlas-financial
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/instance: atlas-prometheus
    spec:
      serviceAccountName: atlas-financial-sa
      securityContext:
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        runAsNonRoot: true
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.51.2
        imagePullPolicy: IfNotPresent
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=90GB'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--log.level=info'
          - '--web.route-prefix=/'
          - '--web.external-url=https://prometheus.atlas-financial.com'
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
---
apiVersion: v1
kind: Service
metadata:
  name: atlas-prometheus
  namespace: atlas-financial
  labels:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: atlas-prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: atlas-financial
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: atlas-prometheus