[tool.poetry]
name = "atlas-ai-engine"
version = "2.0.0"
description = "Atlas Financial AI Engine - Flexible Multi-Agent Architecture"
authors = ["Atlas Financial Team <dev@atlas-financial.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web framework and API
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
gunicorn = "^21.2.0"

# GraphQL
strawberry-graphql = {extras = ["fastapi"], version = "^0.213.0"}

# Database and caching
redis = {extras = ["hiredis"], version = "^5.0.1"}
psycopg2-binary = "^2.9.7"
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"

# Authentication and security
pyjwt = {extras = ["crypto"], version = "^2.8.0"}
cryptography = "^41.0.7"
bcrypt = "^4.1.2"
supertokens-python = "^0.17.4"

# AI and ML libraries
transformers = "^4.35.2"
torch = "^2.1.1"
accelerate = "^0.24.1"
sentencepiece = "^0.1.99"
tokenizers = "^0.15.0"

# HTTP client for model communication
httpx = "^0.25.2"
aiohttp = "^3.9.1"

# Data processing and validation
pydantic = "^2.5.0"
numpy = "^1.25.2"
pandas = "^2.1.3"

# Configuration and environment
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
click = "^8.1.7"

# Monitoring and observability
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-instrumentation-requests = "^0.42b0"
opentelemetry-exporter-prometheus = "^1.12.0rc1"

# Logging and utilities
structlog = "^23.2.0"
rich = "^13.7.0"
typer = "^0.9.0"

# Async utilities
asyncio-mqtt = "^0.13.0"
celery = {extras = ["redis"], version = "^5.3.4"}

# Development and testing dependencies (only in dev)
pytest = {version = "^7.4.3", optional = true}
pytest-asyncio = {version = "^0.21.1", optional = true}
pytest-cov = {version = "^4.1.0", optional = true}
httpx-mock = {version = "^0.10.1", optional = true}
factory-boy = {version = "^3.3.0", optional = true}
freezegun = {version = "^1.2.2", optional = true}

# Code quality
black = {version = "^23.11.0", optional = true}
isort = {version = "^5.12.0", optional = true}
flake8 = {version = "^6.1.0", optional = true}
mypy = {version = "^1.7.1", optional = true}
pre-commit = {version = "^3.6.0", optional = true}

[tool.poetry.extras]
dev = [
    "pytest",
    "pytest-asyncio", 
    "pytest-cov",
    "httpx-mock",
    "factory-boy",
    "freezegun",
    "black",
    "isort",
    "flake8",
    "mypy",
    "pre-commit"
]

[tool.poetry.scripts]
ai-engine = "src.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "redis.*",
    "prometheus_client.*",
    "supertokens_python.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]