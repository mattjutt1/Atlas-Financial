#!/bin/bash

# Atlas Financial - SuperTokens Integration Test Script
# Tests the complete SuperTokens authentication flow

echo "üöÄ Starting Atlas Financial SuperTokens Integration Test"

# Set up environment
export POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-atlas_dev_password}
export SUPERTOKENS_API_KEY=${SUPERTOKENS_API_KEY:-atlas_supertokens_api_key}
export HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET:-atlas_hasura_admin_secret}
export REDIS_PASSWORD=${REDIS_PASSWORD:-atlas_redis_password}

echo "üìã Test Configuration:"
echo "  - PostgreSQL Password: ****"
echo "  - SuperTokens API Key: ****"
echo "  - Hasura Admin Secret: ****"
echo "  - Redis Password: ****"

# 1. Test Database Connectivity
echo "üóÑÔ∏è  Testing PostgreSQL connectivity..."
docker exec atlas-postgres pg_isready -U atlas -d atlas_financial
if [ $? -eq 0 ]; then
    echo "‚úÖ PostgreSQL connection successful"
else
    echo "‚ùå PostgreSQL connection failed"
    exit 1
fi

# 2. Test SuperTokens Core Service
echo "üîê Testing SuperTokens Core Service..."
SUPERTOKENS_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3567/hello)
if [ "$SUPERTOKENS_HEALTH" = "200" ]; then
    echo "‚úÖ SuperTokens Core Service is healthy"
else
    echo "‚ùå SuperTokens Core Service health check failed (HTTP $SUPERTOKENS_HEALTH)"
    exit 1
fi

# 3. Test Hasura GraphQL Engine
echo "üîÑ Testing Hasura GraphQL Engine..."
HASURA_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/healthz)
if [ "$HASURA_HEALTH" = "200" ]; then
    echo "‚úÖ Hasura GraphQL Engine is healthy"
else
    echo "‚ùå Hasura GraphQL Engine health check failed (HTTP $HASURA_HEALTH)"
    exit 1
fi

# 4. Test Frontend Service
echo "üíª Testing Frontend Service..."
FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$FRONTEND_HEALTH" = "200" ]; then
    echo "‚úÖ Frontend Service is healthy"
else
    echo "‚ùå Frontend Service health check failed (HTTP $FRONTEND_HEALTH)"
    exit 1
fi

# 5. Test JWT JWKS Endpoint
echo "üîë Testing JWT JWKS Endpoint..."
JWKS_RESPONSE=$(curl -s http://localhost:3000/api/auth/jwt/jwks.json)
if echo "$JWKS_RESPONSE" | grep -q "keys"; then
    echo "‚úÖ JWKS endpoint is responding correctly"
else
    echo "‚ùå JWKS endpoint not responding correctly"
    echo "Response: $JWKS_RESPONSE"
    exit 1
fi

# 6. Test SuperTokens API Routes
echo "üõ£Ô∏è  Testing SuperTokens API Routes..."
API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/auth/signup)
if [ "$API_RESPONSE" = "200" ] || [ "$API_RESPONSE" = "405" ]; then
    echo "‚úÖ SuperTokens API routes are accessible"
else
    echo "‚ùå SuperTokens API routes not accessible (HTTP $API_RESPONSE)"
    exit 1
fi

# 7. Test Redis Connectivity
echo "üì¶ Testing Redis connectivity..."
docker exec atlas-redis redis-cli --no-auth-warning -a $REDIS_PASSWORD ping
if [ $? -eq 0 ]; then
    echo "‚úÖ Redis connection successful"
else
    echo "‚ùå Redis connection failed"
    exit 1
fi

# 8. Test AI Engine Connectivity
echo "ü§ñ Testing AI Engine connectivity..."
AI_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8083/health)
if [ "$AI_HEALTH" = "200" ]; then
    echo "‚úÖ AI Engine is healthy"
else
    echo "‚ö†Ô∏è  AI Engine health check failed (HTTP $AI_HEALTH) - This is expected if AI Engine is not running"
fi

echo ""
echo "üéâ SuperTokens Integration Test Completed Successfully!"
echo ""
echo "üìä Test Summary:"
echo "‚úÖ PostgreSQL Database"
echo "‚úÖ SuperTokens Core Service"
echo "‚úÖ Hasura GraphQL Engine"
echo "‚úÖ Frontend Next.js Application"
echo "‚úÖ JWT JWKS Endpoint"
echo "‚úÖ SuperTokens API Routes"
echo "‚úÖ Redis Cache"
echo ""
echo "üîó Access Points:"
echo "  - Frontend:        http://localhost:3000"
echo "  - Hasura Console:  http://localhost:8081"
echo "  - SuperTokens:     http://localhost:3567"
echo "  - AI Engine:       http://localhost:8083"
echo ""
echo "üîê Authentication Flow:"
echo "  1. Visit http://localhost:3000"
echo "  2. Click 'Sign In' to be redirected to /auth/signin"
echo "  3. You'll be redirected to SuperTokens auth UI at /auth"
echo "  4. Create an account or sign in"
echo "  5. You'll be redirected back to the dashboard"
echo ""
echo "‚ú® SuperTokens integration is ready for use!"
